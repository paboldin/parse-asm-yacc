
ifneq ($(O),)
O := $(O)/
else
O := ./
endif

EXEC := $(O)parser $(O)gensrc
all: $(EXEC)

CFLAGS += -DYYDEBUG -DYYERROR_VERBOSE=1 -g
ifneq ($(COVERAGE),)
CFLAGS += --coverage -pg
LDLIBS += -lgcov
endif

LDLIBS += -lfl -ly

COMMON_OBJS := y.tab.o lex.yy.o document.o rbtree.o
ALL_OBJS := $(COMMON_OBJS) parser.o gensrc.o
AUTOGENERATED := y.tab.h y.tab.c lex.yy.c

ALL_OBJS := $(foreach obj,$(ALL_OBJS),$(O)$(obj))
COMMON_OBJS := $(foreach obj,$(COMMON_OBJS),$(O)$(obj))

ALL_TARGETS := $(EXEC) $(ALL_OBJS) $(AUTOGENERATED)

tests: all
	./tests/runtests.sh

$(O)parser: $(O)parser.o $(COMMON_OBJS)
	$(LINK.o) $^ $(LDLIBS) -o $@

$(O)gensrc: $(O)gensrc.o $(COMMON_OBJS)
	$(LINK.o) $^ $(LDLIBS) -o $@

$(O)parser.o: document.h y.tab.h

$(O)gensrc.o: document.h y.tab.h

$(O)document.o: document.h parse.h

y.tab.c y.tab.h: asm.y
	yacc --verbose -d $<

$(O)y.tab.o: document.h parse.h

lex.yy.c: asm.l
	flex $^

$(O)%.o: %.c
	$(COMPILE.c) $< -o $@

coverage:
	mkdir -p cov
	make COVERAGE=1 NDEBUG=1 O=cov/
	make tests O=$(CURDIR)/cov/
	lcov -t result -o ex_test.info -c -d .
	lcov -r ex_test.info -o ex_test.info '*/lex.yy.c' '*/y.tab.c'
	genhtml -o coverage-report ex_test.info

valgrind:
	make tests PARSER_PATH="valgrind -q --error-exitcode=1 $(CURDIR)/parser"

valgrind-slow:
	make tests PARSER_PATH="valgrind -q --error-exitcode=1 --leak-check=full --track-origins=yes $(CURDIR)/parser"

clean:
	rm -f $(ALL_TARGETS) *.gcno *.gcda
